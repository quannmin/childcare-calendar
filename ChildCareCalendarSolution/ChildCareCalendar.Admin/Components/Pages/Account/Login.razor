@using ChildCareCalendar.Domain.ViewModels
@using System.Security.Claims
@inject ChildCareCalendar.Domain.EF.ChildCareCalendarContext appDbContext

<div class="row">
    <div class="col-lg-4">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <div class="mb-3 text-center flex-column">
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder ="Username"/>
                <ValidationMessage For="() => Model.Email"/>
            </div>
            <div class="mb-3">
                <lable>Password</lable>
                <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [CascadingParameter]
    HttpContext httpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate() 
    {
        var userAccount = appDbContext.Users.Where(x => x.Email == Model.Email).FirstOrDefault();
        if(userAccount is null || userAccount.Password != Model.Password) {
            errorMessage = "Invalid Username or Password";
            return;
        }
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Email, Model.Email),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };
        
        // var identity = new ClaimsIdentity(claims, )
    }
}
