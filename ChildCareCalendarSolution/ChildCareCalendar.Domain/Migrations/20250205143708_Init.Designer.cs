// <auto-generated />
using System;
using ChildCareCalendar.Domain.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChildCareCalendar.Domain.Migrations
{
    [DbContext(typeof(ChildCareCalendarContext))]
    [Migration("20250205143708_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int?>("ChildrenRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("ExaminationReportId")
                        .HasColumnType("int");

                    b.Property<int?>("FollowUpAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ChildrenRecordId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("FollowUpAppointmentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.ChildrenRecord", b =>
                {
                    b.Property<int>("ChildrenRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChildrenRecordId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ChildrenRecordId");

                    b.HasIndex("UserId");

                    b.ToTable("ChildrenRecords");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.ExaminationReport", b =>
                {
                    b.Property<int>("ExaminationReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExaminationReportId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ExaminationReportId");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("ChildrenRecordId");

                    b.ToTable("ExaminationReports");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.PrescriptionDetail", b =>
                {
                    b.Property<int>("PrescriptionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionDetailId"));

                    b.Property<int>("Dosage")
                        .HasColumnType("int");

                    b.Property<int>("ExaminationReportId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Slot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PrescriptionDetailId");

                    b.HasIndex("ExaminationReportId");

                    b.HasIndex("MedicineId");

                    b.ToTable("PrescriptionDetails");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.RefundReport", b =>
                {
                    b.Property<int>("RefundReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundReportId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("RefundAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefundPercentage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefundReportId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("RefundReports");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkDayId")
                        .HasColumnType("int");

                    b.Property<int>("WorkHourId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkDayId");

                    b.HasIndex("WorkHourId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Speciality", b =>
                {
                    b.Property<int>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialityId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SpecialtyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SpecialityId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.WorkDay", b =>
                {
                    b.Property<int>("WorkDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkDayId"));

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkDayId");

                    b.ToTable("WorkDays");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.WorkHour", b =>
                {
                    b.Property<int>("WorkHourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkHourId"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("WorkHourId");

                    b.ToTable("WorkHours");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("ChildCareCalendar.Domain.Entities.ChildrenRecord", "ChildrenRecord")
                        .WithMany("Appointments")
                        .HasForeignKey("ChildrenRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChildCareCalendar.Domain.Entities.AppUser", "Doctor")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildCareCalendar.Domain.Entities.Appointment", "FollowUpAppointment")
                        .WithMany()
                        .HasForeignKey("FollowUpAppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChildCareCalendar.Domain.Entities.AppUser", "Parent")
                        .WithMany("ParentAppointments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildCareCalendar.Domain.Entities.Payment", "Payment")
                        .WithOne()
                        .HasForeignKey("ChildCareCalendar.Domain.Entities.Appointment", "PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChildrenRecord");

                    b.Navigation("Doctor");

                    b.Navigation("FollowUpAppointment");

                    b.Navigation("Parent");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.ChildrenRecord", b =>
                {
                    b.HasOne("ChildCareCalendar.Domain.Entities.AppUser", "Parent")
                        .WithMany("ChildrenRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.ExaminationReport", b =>
                {
                    b.HasOne("ChildCareCalendar.Domain.Entities.Appointment", "Appointment")
                        .WithOne("ExaminationReport")
                        .HasForeignKey("ChildCareCalendar.Domain.Entities.ExaminationReport", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildCareCalendar.Domain.Entities.ChildrenRecord", "ChildrenRecord")
                        .WithMany("ExaminationReports")
                        .HasForeignKey("ChildrenRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ChildrenRecord");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.PrescriptionDetail", b =>
                {
                    b.HasOne("ChildCareCalendar.Domain.Entities.ExaminationReport", "ExaminationReport")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("ExaminationReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildCareCalendar.Domain.Entities.Medicine", "Medicine")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExaminationReport");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.RefundReport", b =>
                {
                    b.HasOne("ChildCareCalendar.Domain.Entities.Appointment", "Appointment")
                        .WithMany("RefundReports")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("ChildCareCalendar.Domain.Entities.Speciality", "Speciality")
                        .WithMany("Schedules")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildCareCalendar.Domain.Entities.AppUser", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildCareCalendar.Domain.Entities.WorkDay", "WorkDay")
                        .WithMany("Schedules")
                        .HasForeignKey("WorkDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildCareCalendar.Domain.Entities.WorkHour", "WorkHour")
                        .WithMany("Schedules")
                        .HasForeignKey("WorkHourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Speciality");

                    b.Navigation("WorkDay");

                    b.Navigation("WorkHour");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Service", b =>
                {
                    b.HasOne("ChildCareCalendar.Domain.Entities.Speciality", "Speciality")
                        .WithMany("Services")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("ChildrenRecords");

                    b.Navigation("DoctorAppointments");

                    b.Navigation("ParentAppointments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("ExaminationReport");

                    b.Navigation("RefundReports");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.ChildrenRecord", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ExaminationReports");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.ExaminationReport", b =>
                {
                    b.Navigation("PrescriptionDetails");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Medicine", b =>
                {
                    b.Navigation("PrescriptionDetails");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.Speciality", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.WorkDay", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ChildCareCalendar.Domain.Entities.WorkHour", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
