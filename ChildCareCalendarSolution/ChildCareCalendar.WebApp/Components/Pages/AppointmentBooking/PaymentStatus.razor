@page "/PaymentCallback"
@using ChildCareCalendar.Domain.Entities
@using ChildCareCalendar.Infrastructure.Services.Interfaces
@inject NavigationManager Navigation
@inject IPaymentService PaymentService
@inject IAppointmentService AppointmentService

<link href="css/AppointmentBooking/PaymentStatus.css" rel="stylesheet" />

<div class="payment-status-container">
    <div class="status-box @(paymentSuccess ? "success" : "fail")">
        <h2>@message</h2>

        <div class="status-details">
            <p><strong>Mã giao dịch:</strong> @transactionId</p>
            <p><strong>Mã đơn hàng:</strong> @orderId</p>
            <p><strong>Số tiền:</strong> @amount VNĐ</p>
            <p><strong>Phương thức thanh toán:</strong> @paymentMethod</p>
        </div>

        <a class="btn-return" href="/AccountDetail">Quay về trang cá nhân</a>

    </div>
</div>

@code {
    private bool isLoading = true;
    private bool paymentSuccess;
    private string message = "";
    private string transactionId = "";
    private string orderId = "";
    private string amount = "";
    private string paymentMethod = "VNPay";

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (queryParams.Count == 0)
        {
            message = "Không có thông tin thanh toán!";
            paymentSuccess = false;
            isLoading = false;
            return;
        }

        paymentSuccess = queryParams["vnp_ResponseCode"] == "00";
        transactionId = queryParams["vnp_TransactionNo"] ?? "Không có";
        orderId = queryParams["vnp_TxnRef"] ?? "Không có";
        amount = (decimal.Parse(queryParams["vnp_Amount"] ?? "0") / 100).ToString("N0");

        message = paymentSuccess ? "Thanh toán VNPay thành công!" : "Thanh toán VNPay không thành công!";
        var appointmentId = 0;
        var orderInfo = queryParams["vnp_OrderInfo"];

        if (!string.IsNullOrEmpty(orderInfo) && orderInfo.StartsWith("Appointment:"))
        {
            var parts = orderInfo.Split(':', '+');
            if (parts.Length >= 2 && int.TryParse(parts[1], out var parsedId))
            {
                appointmentId = parsedId;
            }
        }

        // 👉 Tạo Payment mới
        var payment = new Payment
            {
                OrderId = orderId,
                TransactionId = transactionId,
                PaymentMethod = "VNPay",
                Amount = decimal.Parse(amount.Replace(",", "")),
                Success = paymentSuccess,
                VnPayResponseCode = queryParams["vnp_ResponseCode"],
                Token = Guid.NewGuid().ToString()
            };

        var savedPayment = await PaymentService.CreatePaymentAsync(payment);
        if (appointmentId != 0)
        {
            var appointment = await AppointmentService.GetAppointmentByIdAsync(appointmentId);
            if (appointment != null)
            {
                if (paymentSuccess)
                {
                    // Giao dịch thành công -> cập nhật ID thanh toán
                    appointment.PaymentId = savedPayment.Id;
                    await AppointmentService.UpdateAppointmentAsync(appointment);
                }
                else
                {
                    // Giao dịch thất bại -> xoá cuộc hẹn
                    await AppointmentService.DeleteAppointmentAsync(appointment.Id);
                    Console.WriteLine("❌ Giao dịch thất bại - Đã xoá cuộc hẹn!");
                }
            }
        }
        

        isLoading = false;
    }
}
